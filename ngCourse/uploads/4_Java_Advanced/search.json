["Introduc°on to Java Programming Language Junji Zhi University of Toronto 1 ","Content • Java language Syntax • “Hello World” program example • Compiling, Running and Debugging Java code • Inheritance • Threading • Synchroniza°on 2 ","Java programming Language • Some buzzwords for Java – “Write Once, Run Anywhere” – Simple – Object oriented – Distributed – Mul°threaded – Dynamic – Architecture neutral – Portable – High performance – Robust – Secure 3 ","Example: Hello World Program • Everything is in a class • One ﬁle, one public class • In the runnable public class: – public static void main(String [] args) 4 ","Primi°ve Data Types • Primi°ve Data Types : byte, short, int, long, ﬂoat, double, boolean, char • Arrays are also a class long [] a = new long[5]; – You can get the length by visi°ng the length ﬁeld of array object a, like this: a.length • String class is very commonly used to represents character strings, for example String s1 = “Hello ”, s2 = “Wolrd!”; String s3 = s1 + s2; 5 ","Operators (same as C/C++) [3] • ++,-- Auto increment/decrement • +,- Unary plus/minus • *,/ Mul°plica°on/division • % Modulus • +,- Addi°on/subtrac°on 6 ","Declaring Variables [3] int n = 1; char ch = ‘A’; String s = “Hello”; Long L = new Long(100000); boolean done = false; final double pi = 3.14159265358979323846; Employee joe = new Employee(); char [] a = new char[3]; Vector v = new Vector(); 7 ","Compared with C/C++ [3] • Java has no: – pointers – typedef – preprocessor – struct – unions – mul°ple inheritance – goto – operator overloading – malloc – … 8 ","Declaring a class • package • Class name • Constructor • Fields • methods 9 ","Compiling, Running and Debugging Java Programs 10 ","Java Development Process .java =&gt; .class =&gt; JVM execu°on 11 ","Installing Java in your machine (1) • Downloading Java Development Kit (JDK) from Oracle • Java Run°me Environment (JRE) is usually included in the JDK installa°on ﬁle. 12 ","Installing Java in your machine (2) • Se±ng JAVA_HOME (Windows): – E.g., C:Program FilesJavajdk1.7.0_45 • Se±ng path and classpath 13 ","Compile .java File into a .class File (Command Line) 14 ","Running HelloWorld in Eclipse IDE Eclipse Download from here . 15 ","Java pla²orm 16 ","Debugging Java in Eclipse (1) • Debugging means “run a program interac°vely while watching the source code and the variables during the execu°on.” [5] • Set breakpoints to stop the program at the middle of execu°on • Eclipse has a Debug Mode 17 ","Debugging Java in Eclipse(2) Image courtesy: h³p:// www.vogella.com/tutorials/EclipseDebugging/images/xdebugstart20.gif.pagespeed.ic.SqCELlNeCm.png 18 ","Debugging Java in Eclipse(3) Table courtesy: h³p://www.vogella.com/tutorials/EclipseDebugging/ar°cle.html 19 ","Java Inheritance 20 ","Inheritance in Java • Java classes can be derived from other classes, thereby inheri°ng ﬁelds and methods from those classes . 21 ","Common Root: Object 22 ","Interface 23 ","“Mul°ple Inheritance” 24 ","A Real World Example: ArrayList h³p://docs.oracle.com/javase/7/docs/api/java/u°l/ArrayList.html 25 ","Java Threading 26 ","Java Threading • A thread is a thread of execu°on in a program [6] • JVM allows an applica°on to have mul°ple threads running concurrently. • Apache Harmony example: h³p://harmony.apache.org/subcomponents/drlvm/TM.html 27 ","Two ways to do threading 1. Extends Thread class 2. Implements Runnable interface h³p://docs.oracle.com/javase/7/docs/api/java/lang/Thread.html 28 ","Thread lifecycle 29 ","How to stop a Thread • Using Thread.interrupt() method: 30 h³p://stackoverﬂow.com/ques°ons/7786305/stopping-a-speciﬁc-java-thread ","Java Synchroniza°on 31 ","Thread Interference (1) • Increment opera°on is translated to mul°ple steps by the virtual machine : 1. Retrieve the current value of c. 2. Increment the retrieved value by 1. 3. Store the incremented value back in c. Example from: h³p://docs.oracle.com/javase/tutorial/essen°al/concurrency/interfere.html 32 ","Thread Interference (2) • Assume we have 2 threads, A and B. • A increments c, and B decrements c. • Thread A and B runs together. • One possible order of the low-level steps: 1. Thread A: Retrieve c. 2. Thread B: Retrieve c. 3. Thread A: Increment retrieved value; result is 1. 4. Thread B: Decrement retrieved value; result is -1. 5. Thread A: Store result in c; c is now 1. 6. Thread B: Store result in c; c is now -1. • Is the result correct? • What if the thread A and B are bank transac°ons? 33 ","Problem Root Cause • Threads are visi°ng one ﬁeld (resource) at the same °me. • Mul°ple steps of an opera°on • No enforced “happen-before” rela°onship 34 ","Solu°on: synchronized method Example: h³p://docs.oracle.com/javase/tutorial/essen°al/concurrency/syncmeth.html 35 ","synchronized method • Enforce the ‘happen-before’ rela°onship in the method level. • Either one of the below instance will happen. But result is always 0, which is correct. 1. Thread A: Retrieve c. 2. Thread A: Increment retrieved value; result is 1. 3. Thread A: Store result in c; c is now 1. 4. Thread B: Retrieve c. 5. Thread B: Decrement retrieved value; result is 0. 6. Thread B: Store result in c; c is now 0. 1. Thread B: Retrieve c. 2. Thread B: Decrement retrieved value; result is -1. 3. Thread B: Store result in c; c is now -1. 4. Thread A: Retrieve c. 5. Thread A: Increment retrieved value; result is 0. 6. Thread A: Store result in c; c is now 0. OR 36 ","synchronized statements (1) • Every object has an intrinsic lock associated with it • Primi°ve types (e.g., int, char) do not have intrinsic locks. • We can combine object intrinsic locks and synchronized keyword to create ﬁne-grained synchroniza°on control. 37 ","synchronized statements (2) 38 h³p://docs.oracle.com/javase/tutorial/essen°al/concurrency/locksync.html ","synchronized statement hazards (1) • Boolean has only two instances of Boolean • If another thread also synchronizes on the same Boolean instance, like this: – private ﬁnal Boolean someLock = Boolean.FALSE ; • The lock will be reused. • The system might be deadlock or unresponsive. • It is hard to detect this type of bugs! 39 h³ps ://www.securecoding.cert.org/conﬂuence/display/java/LCK01-J.+Do+not+synchronize+on+objects+that+may+be+reused More examples: ","synchronized statement hazards (2) 40 • Another example of the wrong way of using locks: What will happen another thread also synchronizes on an integer instance with the 0 integer value? h³ps ://www.securecoding.cert.org/conﬂuence/display/java/LCK01-J.+Do+not+synchronize+on+objects+that+may+be+reused ","synchronized statement hazards (3) • Correct way of using locks: using new to instan°ate an object 41 h³ps ://www.securecoding.cert.org/conﬂuence/display/java/LCK01-J.+Do+not+synchronize+on+objects+that+may+be+reused ","References 1. Thinking in Java 4 th Ed, Bruce Eckel 2. Oracle Java tutorial ( h³p:// docs.oracle.com/javase/tutorial/index.html ) 3. www.cs.drexel.edu/~spiros/teaching/CS575/ slides / java . ppt 4. h³p:// eclipsetutorial.sourceforge.net/Total_Begi nner_Companion_Document.pdf 5. h³p://www.vogella.com/tutorials/EclipseDeb ugging/ar°cle.html 42 "]